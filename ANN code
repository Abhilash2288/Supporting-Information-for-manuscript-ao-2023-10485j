import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

#Data import and preprocessing
data = pd.read_excel("C:/Users/abhil/Downloads/FINAL_CV_DATASET.xlsx")
predictors = ["Potential", "OXIDATION", "Zn/Co_Conc", "SCAN_RATE", "ZN", "CO"]
target = "Current"

train_data, test_data, train_target, test_target = train_test_split(
   data[predictors], data[target], test_size=0.2, random_state=123
)

scaler = StandardScaler()
train_data_scaled = scaler.fit_transform(train_data)
test_data_scaled = scaler.transform(test_data)

train_target = np.array(train_target)
test_target = np.array(test_target)

# Model
model = tf.keras.Sequential([
   tf.keras.layers.Dense(100, activation='relu', input_shape=(len(predictors),)),
   tf.keras.layers.Dense(80, activation='relu'),
   tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

# model training
history = model.fit(train_data_scaled, train_target, epochs=100, batch_size=32, verbose=1)

#prediction
ann_predictions = model.predict(test_data_scaled).flatten()
train_predictions = model.predict(train_data_scaled).flatten()

rmse = np.sqrt(mean_squared_error(test_target, ann_predictions))
mse = mean_squared_error(test_target, ann_predictions)
r2 = r2_score(test_target, ann_predictions)

rmset = np.sqrt(mean_squared_error(train_target, train_predictions))
mset = mean_squared_error(train_target, train_predictions)
r2t = r2_score(train_target, train_predictions)

print("RMSE:", rmse)
print("MSE:", mse)
print("R-squared:", r2)

print("RMSE Train:", rmset)
print("MSE Train:", mset)
print("R-squared Train:", r2t)

# Scatter plot for test data
plt.scatter(test_target, ann_predictions, color='blue')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted (Test Data)')
plt.show()

# Scatter plot for train data
plt.scatter(train_target, train_predictions, color='red')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted (Train Data)')
plt.show()

