from sklearn.base import BaseEstimator, RegressorMixin
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.ensemble import StackingRegressor
from sklearn.linear_model import RidgeCV


# Define a custom wrapper class for KerasRegressor
class ANN_Regressor(BaseEstimator, RegressorMixin):
    def __init__(self, build_fn, **kwargs):
        self.build_fn = build_fn
        self.kwargs = kwargs
        self.model = None

    def fit(self, X, y):
        self.model = self.build_fn(**self.kwargs)
        self.model.fit(X, y)
        return self

    def predict(self, X):
        return self.model.predict(X)

# Create a function to build the Keras model
def create_ann_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Dense(100, activation='relu', input_shape=(len(predictors),)),
        tf.keras.layers.Dense(80, activation='relu'),
        tf.keras.layers.Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Wrap the Keras model using the custom wrapper
ann_regressor = ANN_Regressor(build_fn=create_ann_model, epochs=100, batch_size=32)

# Create a list of base estimators
base_estimators = [
    ('ANN', ann_regressor),
    ('RF', rf_model),
    ('XGB', xgb_model)
]

# Create the stacking ensemble
stacking_model = StackingRegressor(
    estimators=base_estimators,
    final_estimator=RidgeCV()
)

stacking_model.fit(train_data_scaled, train_target)
stacking_predictions = stacking_model.predict(test_data_scaled)

stacking_rmse = mean_squared_error(test_target, stacking_predictions, squared=False)
stacking_mse = mean_squared_error(test_target, stacking_predictions)
stacking_r2 = r2_score(test_target, stacking_predictions)

print("Stacking Test RMSE:", stacking_rmse)
print("Stacking Test MSE:", stacking_mse)
print("Stacking Test R-squared:", stacking_r2)
 
stacking_train_predictions = stacking_model.predict(train_data_scaled)

stacking_train_rmse = mean_squared_error(train_target, stacking_train_predictions, squared=False)
stacking_train_r2 = r2_score(train_target, stacking_train_predictions)

print("Stacking Train RMSE:", stacking_train_rmse)
print("Stacking Train R-squared:", stacking_train_r2)




